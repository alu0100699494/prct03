18. La salida "Hola mundo" con retorno de carro se ha debido al comando puts. La línea inferior, => nil, muestra el resultado devuelto por la operación (ninguno, ya que sólo muestra la cadena de caracteres, no lo devuelve).

21. En el primero, al ponerlo en un puts se muestra una tabulación y un retorno de carro (ya que con las dobles comillas se interpolan las expresiones dentro de la cadena), mientras que en la segunda se muestra \t\n ya que se usan comillas simples, como una unión de 4 caracteres sencillos (y no se evalúan las expresiones en la cadena).

22. Es el equivalente a comillas simples ('). Muestra por pantalla hello world\n (sin analizar el retorno de carro). Muestra el conjunto de caracteres tal cual ('a', 'b', 'c'), ya que se analiza el contenido del elemento como un todo, sin evaluar si tienen comillas dobles o no).

23. Es el equivalente a comillas dobles ("). Muestra por pantalla hellow world seguido de un salto de línea, analizando el \n. Se analizan los elementos internos, por lo que las comillas de los caracteres se representan como " \" ", no como ".

24. Quedan 2 líneas concatenadas (separadas por \n), con cada elemento precedido y seguido con dobles guiones (--):

--4--\n--2--\n

--4--
--2--

25. La representación no interpolada (con comillas simples) de la concatenación de --#{a}-- con --#{b}-- separados por \n. Como no se han evaluado las expresiones, se muestra el contenido literal (texto escrito), no las variables que representan.

26.
a) he (2 caracteres empezando desde el 0 (h) hasta 2 más adelante (e))
b) o (1 carácter desde la posición -1 (o, anterior a la (h) de forma cíclica)
c) hello (10 caracteres empezando desde el 0(h) hasta 10 más adelante (nil, que no se muestra por pantalla)). Es equivalente a usar s[0, 5]

27. Queda la concatenación entre "hello" y " world", o sea, "hello world", añadiendo el contenido de la segunda cadena en la primera.

28. Quedan 3 puntos suspensivos (repetición o multiplicación de '.' por 3).

29. Queda la triple repetición de la evaluación de la expresión entre comillas (a = a + 1 -> a = 1 + 1 -> a = 2), con espacios entre sí. Cada vez que se invoca el comando "#{a=a+1} "*3 se ve incrementado el valor de a (1, 2, 3, 4...).

30. Un array formado por 4 palabras de la frase en letras minúsculas, sin evaluar su contenido, teniendo en cuenta que se delimitan por espacios.

31. Un array de 2 palabras sencillas (\t y \n), que no son considerados caracteres especiales.

32. Un array de 2 caracteres especiales, que se consideran como tabulación y salto de línea.

33. Un objeto de la clase Array que contiene 3 elementos no iniciados (puestos a nil).

34. Un objeto de la clase Array que contiene 3 elementos iniciados a 0.

35. Un objeto de la clase Array (matriz bidimensional en este caso) que ha sido copiado de la matriz "x".

36. Un objeto de la clase Array que contiene 3 elementos que han sido inicializados en función del bloque de código adjunto en la invocación (código contenido en llaves). Para cada elemento del vector (i), se multiplica por 2 (2*i).

37. 
a) a[1,1] -> 1 elemento empezando a contar por el elemento de índice 1 ("b")
b) a[-2,2] -> 2 elementos empezando a contar por el elemento de índice -2 (size - 2 = + 3) ("d", "e")
c) a[0..2] -> elementos contenidos entre los índices 0 y 2 ("a", "b", "c").
d) a[0...1] -> Equivalente a a[0,1], muestra el primer elemento contando desde el índice 0 ("a").
e) a[-2..-1] -> Muestra los elementos desde el índice -2 (5-2 = +3 ("d") hasta el elemento del índice -1 (5-1 = +4 ("e")) ("d", "e").

38. 
a) Asigna los 2 primeros elementos a "A" y "B", respectivamente.
b) Asigna los 3 últimos elementos a "C", "D" y "E", respectivamente.
c) Añade al comienzo los elementos 1, 2 y 3
d) Elimina los 2 primeros elementos (1 y 2)
e) Asigna el último elemento el valor "Z"
f) Asigna a los 2 últimos valores el objeto nulo (nil)

39. 
a) [1, 2, 3] -> Transforma el conjunto de números (del 1 al 4 sin contar el último).
b) [1, 2, 3, 4, 5] -> Añade al final de nuestro vector los elementos 4 y 5
c) [1, 2, 3, 4, 5, [6, 7, 8]] -> Añade al final el vector el elemento vector [6, 7, 8]
d) Error, ya que no se puede sumar un array con un entero (debería ser [9], no 9)

40.
a) ["a", "b", "c", "b", "a"] -> Guarda en x un array de palabras compuesto por los elementos que están en corchetes ("a", "b"...)
b) ["a", "a"] -> Elimina de x el subvector de palabras formado por "b", "c" y "d"

41. [0, 0, 0, 0, 0, 0, 0, 0] -> iguala Z a 8 repeticiones de un elemento (0), formando un array de 8 elementos.

42. 
a) [1] -> Inserta el elemento 1 en a (al final)
b) [1, 2, 3] -> Inserta los elementos 2 y 3 en a (al final)
c) [1, 2, 3, [4, 5, 6]] -> Inserta el vector [4, 5, 6] en a (al final)
d) [1, 2, 3, [4, 5, 6], 7, 8] -> Concatena (inserta) al final de a los elementos 7 y 8

43. 
a) [1, 2, 3, 4, 5] -> Unión de a y b (sin repetir elementos), partiendo de los elementos de a
b) [5, 4, 3, 2, 1] -> Unión de b y a (sin repetir elementos), partiendo de los elementos de b
c) [2, 3, 4] -> Intersección de a y b(sin repetir elementos), partiendo de los elementos de a
d) [4, 3, 2] -> Intersección de b y a(sin repetir elementos), partiendo de los elementos de b

44.
a) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] -> Transforma el rango (1..10) en un array de 10 elementos que comprenden ese rango.
b) [1, 2, 3, 4, 5, 6, 7, 8, 9] -> Transforma el rango (1...10) en un array de 9 elementos que comprenden ese rango menos el último elemento (10).
c) false -> Pregunta si el elemento 10 está incluido en b
d) true -> Pregunta si el elemento 8 está incluido en b
e) 1 3 5 7 9 -> Partiendo del primer elemento, y saltando de 2 en 2 (step(2)), imprime el valor del vector b en esa posición seguido de un espacio.
f) error -> Se precisa usar paréntesis en el rango, ya que ruby detecta que se intenta usar el método en el entero 3, y no en el rango en sí.


45.
a) true -> Pregunta si 50 es miembro de ese rango.
b) true -> Pregunta si 99.9 es miembro a ese rango.
c) true -> Pregunta si 99.9 pertenece o está incluido en ese rango.

46.
a) TrueClass
b) FalseClass
c) hello -> if 0 devuelve true, ya que se considera que el valor 0 existe.
d) "" -> if nil devuelve false, ya que nil no es ningún valor.
c) hello / warning -> "" es true, y se avisa al usuario de que hay una cadena de caracteres en una condición.

47. 
a) Symbol
b) false -> un símbolo y una cadena de caracteres no son iguales
c) :"a long symbol" (símbolo con el nombre indicado)
d) Symbol
e) true -> :sym si es igual a 'sym'.to_sym (:sym)
f) trye -> :sym.to_s ("sym") si es igual a "sym"

48.
a) Rub -> se ha sustituido el último carácter por ""
b) RubJava -> se imprime s y posteriormente t, sin retorno de carro ni espacio entre ambos (equivalente a print s+t, que imprime la concatenación)

49.
Imprime la salida formateada de ese vector [3, "rubies"], indicando que primero se coloca un entero (en base 10) y luego una cadena de caracteres (string), separados por un espacio. Es equivalente a usar printf

50. 
a) [4, 5] -> Asigna a x el valor 4 y a y el valor 5
b) 4 -> si z (z = x = 4) es mayor que y (4), se imprime x, y si no, se imprime y
c) [1, 2, 3] -> Asigna a los valores x, y, z los valores del vector [1, 2, 3] (x = 1, y = 2, z = 3).

51. Se ha generado un hash ("diccionario") con 2 entradas (2 claves y 2 valores)
a) [:a, :b] -> Se muestra el conjunto de las claves
b) [1, 2] -> Se muestra el conjunto de los valores
c) 3 -> Se añade el elemento con valor 3 y clave :c (símbolo)
d) {:a=>1, :b=>2, :c=>3} -> Se muestra todo el hash (clave => símbolo)
e) {:a=>1, :b=>2, :c=>3} -> se borra el elemento con clave 'a' (ninguno, ya que sólo hay símbolos, no strings).
g) {:b=>2, :c=>3} -> se borra el elemento con clave :a (valor 1)
h) {:a=>1} -> Borrado condicional. Se borran los elementos con valor par (val % 2 == 0), en este caso b=>2, c=>4

52. Invoca al bloque de código adjunto en el método definido (en este caso, ninguno) pasándole los parámetros 4 y 5 al bloque. Como no se ha definido ningún método y estamos en la función principal, devuelve un error al intentar invocar yield.

53.
a) Crea un hash vacío (clase Hash).
b) Vuelve a crear un hash vacío (clase Hash).

54. ["hello", "world", "hello", "LPP"] -> Escanea la cadena de caracteres desde la cual se invoca scan en función de una expresión regular /\w+/ ( busca palabras separadas por espacios(\w+) ), e introduciendo todas las palabras como strings en un array.

55. 
c = { :a => 3, :b => 2, :c => 1 } -> Crea un hash en c, con 3 entradas (3 claves y 3 valores), tal que la clave de el valor 3 es :a, la del valor 2 es :b, y la del valor :c es 1
c.keys.sort.each { |k| puts c[k] }
  Primero, se accede al conjunto de claves del hash con el método .keys ( [:a, :b, :c] )
  Luego, se ordenan con el método sort (como son caracteres, se ordenan alfabéticamente, pero ya están ordenados, por lo que no se hace nada).
  Finalmente, se invoca al método each. Para cada clave k en el conjunto ordenado de claves de c, se imprime por pantalla el valor del Hash que tiene por clave k.
  

